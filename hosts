################################################################################
# VER=3.11
################################################################################
## Before deploying cluster always check latest:
## 1.https://access.redhat.com/documentation/en-us/openshift_container_platform/
## $VER/html-single/installing_clusters/#install-config-example-inventories,
##
## 2.https://github.com/openshift/openshift-ansible/tree/master/roles/
## openshift_storage_glusterfs and openshift_logging
##
## 3. https://docs.okd.io/latest/3.11/configuring_inventory_file.html
## 4. https://github.com/redhat-storage/openshift-cic
##
## then run on fresh system:
##
## ssh keygen
## ssh-copy-id /root/.ssh/id_rsa.pub root@osh.localdomain
## ssh root@osh.localdomain
## git clone https://github.com/openshift/openshift-ansible.git -b release-$VER
## yum install epel-release
## yum install ansible
## cd openshift-ansible/playbooks
## ansible-playbook deploy_cluster.yml

################################################################################
## Setup A: In an almost ideal production world:
################################################################################
# ((master) API server, scheduler, etcd )
# ((infra) registry)
# ((infra) router1)
# ((infra) router2)
# ((node) deployments)
# ((node) deployments)
#
# so at least 6 servers - why?
# registry generates network traffic which which may affect router, also I/O
#  which may affect etcd, wich requires high independent I/O bandwith
# deployments generate CPU load and should be separated from infra (API, ...)
# deployments and routers should be highly available, so are at least doubled

################################################################################
## Setup B: production/qa on limited resources:
################################################################################
# ((master) API server, scheduler, etcd, registry)
# ((node) router, deployments)
# ((node) router, deployments)
#
# so at least 3 nodes - why?
# in case etcd and registry use separated disks they may be collocated and
# we assume not very huge disk/network load with registry

###############################################################################
## Setup C: DEV, everything on one box
###############################################################################

[masters]
# at least 4vCPUs, 16GB RAM, 50GB SSD storage
k0.sys.one.pl openshift_schedulable=true storage=true

[etcd]
# at least 2vCPUs, 8GB RAM, 5GB SSD storage
# etcd generates a lot of I/O and needs very durable SSD
k0.sys.one.pl

[nodes]
# at least 1vCPU, 8GB RAM, 40GB storage, 2 x 100GB for GlusterFS
k0.sys.one.pl openshift_node_group_name="node-config-all-in-one"
#k0.sys.one.pl openshift_node_group_name="node-config-master-infra"
#k0.sys.one.pl openshift_node_group_name="node-config-infra"
#k0.sys.one.pl openshift_node_group_name="node-config-compute"

[glusterfs]
# For DEV please modify:
# - glusterfs_deploy.yml, 'assert' condition should contain 'count >= 1'
# - tasks/heketi_init_db.yml, add in setup cmd '--durability=none --replica=1',
# - gluster-*-storageclass.yml.j2, set hacount:"1", volumetype:"none"
#
# You need 100GB local SSD or LVM
#
k0.sys.one.pl glusterfs_devices='[ "/dev/sdc" ]'

[OSEv3:children]
masters
nodes
etcd
glusterfs

[OSEv3:vars]
# router should be placed on infra
openshift_router_selector='node-role.kubernetes.io/master=true'
# registry should be placed on infra
openshift_registry_selector='node-role.kubernetes.io/master=true'
# we want to use docker with --storage-driver=btrfs
openshift_disable_check=memory_availability,disk_availability,docker_storage_driver,docker_storage,docker_image_availability

# we want to use GlusterFS replicated storage everywhere
openshift_master_dynamic_provisioning_enabled=true
openshift_hosted_registry_storage_kind=glusterfs
openshift_hosted_registry_storage_volume_size=4Gi
openshift_hosted_registry_selector='node-role.kubernetes.io/infra=true'
openshift_hosted_registry_replicas=1

openshift_metrics_install_metrics=true
openshift_metrics_hawkular_nodeselector={"node-role.kubernetes.io/infra": "true"} 
openshift_metrics_cassandra_nodeselector={"node-role.kubernetes.io/infra": "true"} 
openshift_metrics_heapster_nodeselector={"node-role.kubernetes.io/infra": "true"} 
#openshift_metrics_cassandra_storage_type=pv
#openshift_metrics_cassandra_pvc_storage_class_name=glusterfs-storage-block
openshift_metrics_storage_volume_size=1Gi
openshift_metrics_cassandra_storage_type=emptydir
openshift_metrics_cassandra_pvc_storage_class_name=""

openshift_logging_install_logging=true
openshift_logging_kibana_nodeselector={"node-role.kubernetes.io/infra": "true"} 
openshift_logging_curator_nodeselector={"node-role.kubernetes.io/infra": "true"} 
openshift_logging_es_nodeselector={"node-role.kubernetes.io/infra": "true"} 
openshift_logging_es_pvc_dynamic=true
openshift_logging_elasticsearch_storage_type=pvc
openshift_logging_es_pvc_storage_class_name=glusterfs-storage
openshift_logging_es_pvc_size=10Gi
openshift_logging_es_allow_external=true
openshift_logging_es_memory_limit=1Gi
openshift_logging_es_ops_memory_limit=1Gi
openshift_logging_es_number_of_replicas=0
openshift_logging_curator_memory_limit=512Mi
openshift_logging_kibana_memory_limit=512Mi
openshift_logging_kibana_ops_memory_limit=512Mi
openshift_logging_kibana_proxy_memory_limit=512Mi
openshift_logging_fluentd_memory_limit=512Mi
openshift_logging_use_ops=false

openshift_storage_glusterfs_namespace=app-storage
openshift_storage_glusterfs_storageclass=true
openshift_storage_glusterfs_storageclass_default=false
openshift_storage_glusterfs_block_deploy=true
openshift_storage_glusterfs_block_host_vol_size=20
openshift_storage_glusterfs_block_storageclass=true
openshift_storage_glusterfs_block_storageclass_default=false

openshift_hosted_manage_router=true
openshift_hosted_manage_registry=true
openshift_hosted_manage_registry_console=true

# let's scale router
openshift_hosted_router_replicas=1

# dynamic persistent local storage
#openshift_persistentlocalstorage_enabled=true
#openshift_persistentlocalstorage_classes=[]
#openshift_persistentlocalstorage_path=/mnt/local-storage
#openshift_persistentlocalstorage_provisionner_image=quay.io/external_storage/local-volume-provisioner:latest

openshift_deployment_type=origin
#openshift_deployment_type=openshift-enterprise
openshift_release="3.11"
openshift_install_examples=true
containerized=true

# subdomain concept: service.apps.k0.sys.one.pl
openshift_master_default_subdomain=apps.k0.sys.one.pl
openshift_master_cluster_hostname=k0.sys.one.pl
openshift_master_cluster_public_hostname=k0.sys.one.pl

# in case you have network LB device in front of OCP services
# you don't need manually provided certificates, but it is highly
# recommended; when you consume services directly from router
# it should use own dedicated certificates
#
openshift_ca_cert_expire_days=3660
openshift_node_cert_expire_days=3660
openshift_master_cert_expire_days=3660
etcd_ca_default_days=3660
#openshift_master_named_certificates=
#openshift_hosted_router_certificate=

openshift_cluster_monitoring_operator_install=true
ansible_service_broker_install=true
openshift_node_problem_detector_install=false
openshift_enable_olm=true
osm_use_cockpit=true
osm_cockpit_plugins=['cockpit-kubernetes']

# uncomment if you don't have docker already configured for OKD container method
#openshift_docker_insecure_registries=172.30.0.0/16
openshift_docker_options="--selinux-enabled"

# Some SLAs
openshift_master_external_ratelimit_qps=200
openshift_master_external_ratelimit_burst=400
openshift_master_loopback_ratelimit_qps=300
openshift_master_loopback_ratelimit_burst=600

# please change
openshift_master_identity_providers=[{'name': 'allow_all', 'login': 'true', 'challenge': 'true', 'kind': 'AllowAllPasswordIdentityProvider'}]

# may be useful if DNS is broken
#openshift_node_dnsmasq_additional_config_file=/etc/dnsmasq/conf.d/infra.conf

# mandatory
os_firewall_use_firewalld=true
ansible_ssh_user=root
